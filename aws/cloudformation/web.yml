AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a service on AWS Fargate, hosted in a private subnet, but accessible via a public load balancer.
Parameters:
  StackName:
    Type: String
    Description: The name of the parent networking stack

  DomainName:
    Type: String
    Description: Domain name for ALB host based routing

  HTPasswd:
    Type: String
    Default: ""
    Description: Password protection .htpasswd

  PrerenderToken:
    Type: String
    Default: ""
    Description: Prerender.io token

  GoogleTagManagerId:
    Type: String
    Description: Google tag manager ID token

  RollbarEnv:
    Type: String
    Description: Rollbar environment
    AllowedValues:
    - development
    - production

  AndroidAppId:
    Type: String
    Description: Android app ID

  IOSAppId:
    Type: String
    Description: IOS app ID

  AndroidAppName:
    Type: String
    Description: Android app name

  IOSAppName:
    Type: String
    Description: IOS app name

  PriorityPrefix:
    Type: Number
    Description: Prefix for ALB routing priorities

  ApiURL:
    Type: String
    Description: API URL

  ServerURL:
    Type: String
    Description: Server URL

  StripePublishKey:
    Type: String
    Description: Stripe publish key

  BranchIOKey:
    Type: String

  ImageRepository:
    Type: String
    Default: 376169159073.dkr.ecr.us-east-1.amazonaws.com/
    Description: Image repository

  ImageTag:
    Type: String
    Default: ':latest'
    Description: Image tag

  HttpPort:
    Type: Number
    Default: 80

  DesiredCount:
    Type: Number
    Default: 2
    Description: How many copies of the service task to run

  Role:
    Type: String
    Default: ""
    Description: (Optional) An IAM role to give the service's containers if the code within needs to
                 access other AWS resources like S3 buckets, DynamoDB tables, etc

Conditions:
  HasCustomRole: !Not [ !Equals [!Ref 'Role', ''] ]

Resources:

  #--------------------------------------------------------------------------------------------------------------------
  # Common resources
  #--------------------------------------------------------------------------------------------------------------------

  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref 'AWS::StackName'
      RetentionInDays: 14

  #--------------------------------------------------------------------------------------------------------------------
  # WEB
  # Serves static content and proxies dynamic content to backend NODE at InternalLB:8080
  #--------------------------------------------------------------------------------------------------------------------

  NginxTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ['-', [!Ref 'AWS::StackName', 'nginx']]
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'ECSTaskExecutionRole']]
      TaskRoleArn:
        Fn::If:
          - 'HasCustomRole'
          - !Ref 'Role'
          - !Ref "AWS::NoValue"
      ContainerDefinitions:
        - Name: 'nginx'
          Image: !Join ['', [!Ref 'ImageRepository', 'web-nginx-aws', !Ref 'ImageTag']]
          PortMappings:
            - ContainerPort: !Ref 'HttpPort'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'AWS::StackName'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: 'web'
          Ulimits:
          - Name: nofile
            HardLimit: 8192
            SoftLimit: 8192
          Environment:
          - { Name: API_URL, Value: !Ref 'ApiURL' }
          - { Name: SERVER_URL, Value: !Ref 'ServerURL' }
          - { Name: STRIPE_PUBLISH_KEY, Value: !Ref 'StripePublishKey' }
          - { Name: DOMAIN_NAME, Value: !Ref 'DomainName' }
          - { Name: HTPASSWD, Value: !Ref 'HTPasswd' }
          - { Name: PRERENDER_TOKEN, Value: !Ref 'PrerenderToken' }
          - { Name: GOOGLE_TAG_MANAGER_ID, Value: !Ref 'GoogleTagManagerId' }
          - { Name: BRANCH_IO_KEY, Value: !Ref 'BranchIOKey' }
          - { Name: ROLLBAR_ENV, Value: !Ref 'RollbarEnv' }
          - { Name: ANDROID_APP_ID, Value: !Ref 'AndroidAppId' }
          - { Name: IOS_APP_ID, Value: !Ref 'IOSAppId' }
          - { Name: ANDROID_APP_NAME, Value: !Ref 'AndroidAppName' }
          - { Name: IOS_APP_NAME, Value: !Ref 'IOSAppName' }

  WebService:
    Type: AWS::ECS::Service
    DependsOn:
    - WebLoadBalancerRuleHTTP
    - WebLoadBalancerRuleHTTPS
    Properties:
      ServiceName: !Join ['-', [!Ref 'AWS::StackName', 'web']]
      Cluster:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'ClusterName']]
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref 'DesiredCount'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'FargateContainerSecurityGroup']]
          Subnets:
            - Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'PrivateSubnetOne']]
            - Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'PrivateSubnetTwo']]
      TaskDefinition: !Ref 'NginxTaskDefinition'
      LoadBalancers:
        - ContainerName: 'nginx'
          ContainerPort: !Ref 'HttpPort'
          TargetGroupArn: !Ref 'WebTargetGroup'

  WebTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /nginx-status
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      #Name: !Join ['-', [!Ref 'AWS::StackName', 'web']]
      Port: !Ref 'HttpPort'
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'VPCId']]

  WebLoadBalancerRuleHTTP:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'WebTargetGroup'
          Type: 'forward'
      Conditions:
        - Field: host-header
          Values: [!Ref 'DomainName']
        - Field: path-pattern
          Values: ['*']
      ListenerArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'PublicListenerHTTP']]
      Priority: !Join ['', [!Ref 'PriorityPrefix', '01']]

  WWWLoadBalancerRuleHTTP:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'WebTargetGroup'
          Type: 'forward'
      Conditions:
        - Field: host-header
          Values: [!Join ['.', ['www', !Ref 'DomainName']]]
        - Field: path-pattern
          Values: ['*']
      ListenerArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'PublicListenerHTTP']]
      Priority: !Join ['', [!Ref 'PriorityPrefix', '02']]

  WebLoadBalancerRuleHTTPS:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'WebTargetGroup'
          Type: 'forward'
      Conditions:
        - Field: host-header
          Values: [!Ref 'DomainName']
        - Field: path-pattern
          Values: ['*']
      ListenerArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'PublicListenerHTTPS']]
      Priority: !Join ['', [!Ref 'PriorityPrefix', '01']]

  WWWLoadBalancerRuleHTTPS:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'WebTargetGroup'
          Type: 'forward'
      Conditions:
        - Field: host-header
          Values: [!Join ['.', ['www', !Ref 'DomainName']]]
        - Field: path-pattern
          Values: ['*']
      ListenerArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'PublicListenerHTTPS']]
      Priority: !Join ['', [!Ref 'PriorityPrefix', '02']]
